{%- assign filterFound = false -%}

{%- for parameter in operation.QueryParameters -%}
  {%- if parameter.VariableName contains "filter" -%}
    {%- assign filterFound = true -%}
    {%- break -%}
  {%- endif -%}
{%- endfor -%}


{%- if operation.IsGet == true -%}
let options_: RequestInit = {
  {%- if operation.HasBody -%}
  body: content_,
  {%- endif -%}
  method: "{{ operation.HttpMethodUpper | upcase }}",
  {%- if UseAbortSignal -%}
  signal,
  {%- endif -%}
  cache: "no-store",
  headers: await getHeaders("{{ operation.HttpMethodUpper | upcase }}", String(baseUrl)),
  {%- if filterFound  -%}
  {%- else -%}
  {%- if operation.IsCacheEnabled == true -%}
  next: { revalidate: 60 }
  {%- else -%}
  next: { revalidate: 0 }
  {%- endif -%}
  {%- endif -%}
};
{% if operation.IsCacheRequired == true -%}
        options_ = addCacheOption(cacheInvalidator ?? [], options_);
    {%- else -%}
    {%- if filterFound -%}
        options_ = addCacheOption(filter ?? [], options_);
    {% endif -%}
{%- endif -%}
{%- endif -%}

let url_ = baseUrl + "{{ operation.Path }}{% if operation.HasQueryParameters %}{% endif %}";
{% if operation.HasQueryParameters -%}
    {% assign hasSpecialParameters = false %}
    {% for parameter in operation.QueryParameters -%}
        {% if parameter.Name == "expand" or parameter.Name == "filter" or parameter.Name == "sort" or parameter.Name == "pageIndex" or parameter.Name == "pageSize" %}
            {% assign hasSpecialParameters = true %}
        {% endif %}
    {% endfor -%}

   {% if hasSpecialParameters %}
    {% if operation.IsGetOrDeleteOrHead == true or operation.IsPost == true or operation.IsPut == true %}
        url_ += BuildEndpointQueryString({% raw %}{{% endraw %}{% for parameter in operation.QueryParameters %}{% if parameter.VariableName == "expand" or parameter.VariableName == "filter" or parameter.VariableName == "sort" or parameter.VariableName == "pageSize" or parameter.VariableName == "pageIndex" %}{{parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}{% if parameter.IsLast == false %}, {% endif %}{% endif %}{% endfor %}{% raw %}}{% endraw %});
    {% endif %}
{% endif %}

    {% for parameter in operation.QueryParameters -%}
        {% if parameter.IsOptional and parameter.Name != "expand" and parameter.Name != "filter" and parameter.Name != "sort" and parameter.Name != "pageIndex" and parameter.Name != "pageSize" %}
            {% if parameter.VariableName != null %}
                {% if parameter.VariableName != undefined %}
                    url_ += (url_.indexOf('?') === -1 ? '?' : '&') + "{{ parameter.Name }}=" + encodeURIComponent("" + {{ parameter.VariableName }});
                {% endif %}
            {% endif %}
        {% elsif parameter.IsOptional == false %}
            url_ += (url_.indexOf('?') === -1 ? '?' : '&') + "{{ parameter.Name }}=" + encodeURIComponent("" + {{ parameter.VariableName }});
        {% endif %}
    {% endfor %}
{% endif %}

{% for parameter in operation.PathParameters -%}
{%    if parameter.IsRequired -%}
if ({{ parameter.VariableName }} === undefined || {{ parameter.VariableName }} === null)
    throw new Error("The parameter '{{ parameter.VariableName }}' must be defined.");
{%    else -%}
if ({{ parameter.VariableName }} !== null && {{ parameter.VariableName }} !== undefined)
{%    endif -%}
{%    if parameter.IsDateOrDateTimeArray -%}
url_ = url_.replace("{{ "{" }}{{ parameter.Name }}}", encodeURIComponent({{ parameter.VariableName }}.map(s_ => s_ ? s_.{{ parameter.GetDateTimeToString }} : "null").join()));
{%    elsif parameter.IsDateOrDateTime -%}
url_ = url_.replace("{{ "{" }}{{ parameter.Name }}}", encodeURIComponent({{ parameter.VariableName }} ? "" + {{ parameter.VariableName }}.{{ parameter.GetDateTimeToString }} : "null"));
{%    elsif parameter.IsArray -%}
url_ = url_.replace("{{ "{" }}{{ parameter.Name }}}", encodeURIComponent({{ parameter.VariableName }}.join()));
{%    else -%}
url_ = url_.replace("{{ "{" }}{{ parameter.Name }}}", encodeURIComponent("" + {{ parameter.VariableName }}));
{%    endif -%}
{%    if parameter.IsOptional -%}
else
    url_ = url_.replace("/{{ "{" }}{{ parameter.Name }}}", "");
{%    endif -%}
{% endfor -%}
{% for parameter in operation.QueryParameters -%}
{%    if parameter.IsRequired -%}
{%        if parameter.IsNullable -%}
if ({{ parameter.VariableName }} === undefined)
    throw new Error("The parameter '{{ parameter.VariableName }}' must be defined.");
else if({{ parameter.VariableName }} !== null)
{%        else -%}
if ({{ parameter.VariableName }} === undefined || {{ parameter.VariableName }} === null)
    throw new Error("The parameter '{{ parameter.VariableName }}' must be defined and cannot be null.");
else
{%        endif -%}
{%    else -%}
{%        if parameter.IsNullable -%}
if ({{ parameter.VariableName }} !== undefined && {{ parameter.VariableName }} !== null)
{%        else -%}
if ({{ parameter.VariableName }} === null)
    throw new Error("The parameter '{{ parameter.VariableName }}' cannot be null.");
{%    endif -%}
{%    endif -%}
{% endfor -%}
url_ = url_.replace(/[?&]$/, "");