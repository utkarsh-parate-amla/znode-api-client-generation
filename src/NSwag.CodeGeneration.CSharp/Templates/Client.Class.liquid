{% template Client.Class.Annotations %}
[System.CodeDom.Compiler.GeneratedCode("NSwag", "{{ ToolchainVersion }}")]
{{ ClientClassAccessModifier }} partial class {{ Class }} {% if HasBaseType %}: {% endif %}{% if HasBaseClass %}{{ BaseClass }}{% if GenerateClientInterfaces %}, {% endif %}{% endif %}{% if GenerateClientInterfaces %}I{{ Class }}{% endif %}
{
{% if UseBaseUrl and GenerateBaseUrlProperty -%}
private string _baseUrl = "{{ BaseUrl }}";
{% endif -%}
{% if InjectHttpClient -%}
private {{ HttpClientType }} _httpClient;
{% endif -%}
{% if UseRequestAndResponseSerializationSettings -%}
private System.Lazy<{{ JsonSerializerSettingsType }}> _requestSettings;
private System.Lazy<{{ JsonSerializerSettingsType }}> _responseSettings;
{% else -%}
private System.Lazy<{{ JsonSerializerSettingsType }}> _settings;
{% endif -%}
{% assign firstVariableName = "" %}
{% assign index = 0 %}

{% if HasConfigurationClass -%}
public {{ Class }}({{ ConfigurationClass }} configuration{% if InjectHttpClient %}, {{ HttpClientType }} httpClient{% endif %}) : base(configuration)
{
{%     if InjectHttpClient -%}
_httpClient = httpClient;
{%     endif -%}
{% elsif UseBaseUrl and HasBaseUrl == false %}
public {{ Class }}(string baseUrl{% if InjectHttpClient %}, {{ HttpClientType }} httpClient{% endif %})
{
BaseUrl = baseUrl;
{%     if InjectHttpClient -%}
_httpClient = httpClient;
{%     endif -%}
{% elsif InjectHttpClient %}
public {{ Class }}({{ HttpClientType }} httpClient)
{
_httpClient = httpClient;
{% else -%}
public {{ Class }}()
{
{% endif -%}
{% if UseRequestAndResponseSerializationSettings -%}
_requestSettings = new System.Lazy<{{ JsonSerializerSettingsType }}>(() => CreateSerializerSettings(true));
_responseSettings = new System.Lazy<{{ JsonSerializerSettingsType }}>(() => CreateSerializerSettings(false));
{% else -%}
_settings = new System.Lazy<{{ JsonSerializerSettingsType }}>(CreateSerializerSettings);
{% endif -%}
{% template Client.Class.Constructor %}
}

private {{ JsonSerializerSettingsType }} CreateSerializerSettings({% if UseRequestAndResponseSerializationSettings %}bool isRequest{% endif %})
{
var settings = {{ JsonSerializerParameterCode }};
{% if UseSystemTextJson == false and SerializeTypeInformation -%}
settings.TypeNameHandling = Newtonsoft.Json.TypeNameHandling.Auto;
{% endif -%}
{% if UseSystemTextJson == true and JsonConvertersArrayCode contains "System.Text.Json.Serialization.JsonConverter[]" -%}
var converters = {{ JsonConvertersArrayCode }};
foreach(var converter in converters)
settings.Converters.Add(converter);
{% endif -%}
UpdateJsonSerializerSettings(settings{% if UseRequestAndResponseSerializationSettings %}, isRequest{% endif %});
return settings;
}

{% if UseBaseUrl and GenerateBaseUrlProperty -%}
public string BaseUrl
{
get { return _baseUrl; }
set { _baseUrl = value; }
}

{% endif -%}
{% if ExposeJsonSerializerSettings -%}
{%     assign serializerSettingsAccessModifier = "public" %}
{% else -%}
{%     assign serializerSettingsAccessModifier = "protected" %}
{% endif -%}
{% if UseRequestAndResponseSerializationSettings -%}
{{ serializerSettingsAccessModifier }} {{ JsonSerializerSettingsType }} RequestJsonSerializerSettings { get { return _requestSettings.Value; } }
{{ serializerSettingsAccessModifier }} {{ JsonSerializerSettingsType }} ResponseJsonSerializerSettings { get { return _responseSettings.Value; } }
{% else -%}
{{ serializerSettingsAccessModifier }} {{ JsonSerializerSettingsType }} JsonSerializerSettings { get { return _settings.Value; } }
{% endif -%}

{% if GenerateUpdateJsonSerializerSettingsMethod -%}
{%     if UseRequestAndResponseSerializationSettings -%}
partial void UpdateJsonSerializerSettings({{ JsonSerializerSettingsType }} settings, bool isRequest);
{%     else -%}
partial void UpdateJsonSerializerSettings({{ JsonSerializerSettingsType }} settings);
{%     endif -%}
{% endif -%}


{% if GeneratePrepareRequestAndProcessResponseAsAsyncMethods == false -%}
partial void PrepareRequest({{ HttpClientType }} client, System.Net.Http.HttpRequestMessage request, string url);
partial void PrepareRequest({{ HttpClientType }} client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
partial void ProcessResponse({{ HttpClientType }} client, System.Net.Http.HttpResponseMessage response);
{% endif -%}
{% for operation in Operations %}
{% assign firstVariableName = "" %}
{% assign index = 0 %}

{% for parameter in operation.PathParameters %}
    {% if index == 0 %}
        {% assign firstVariableName = parameter.VariableName %}
    {% endif %}
    {% assign index = index | plus: 1 %}
{% endfor %}

{% assign capitalizedFirstVariableName = firstVariableName | capitalize %}

{% if firstVariableName != "" %}
    {% assign firstValue = "By" | append: capitalizedFirstVariableName %}
{% else %}
    {% assign firstValue = "" %}
{% endif %}
{%     if GenerateOptionalParameters == false -%}
{% template Client.Method.Documentation %}
{% template Client.Method.Annotations %}
{% if operation.ClientSuffix != "multifront" %}

{{ operation.MethodAccessModifier }} virtual {{ operation.ResultType }} {{operation.MethodType}}{{ operation.ActualOperationName }}{{ firstValue }}Async({% for parameter in operation.Parameters %}{{ parameter.Type }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}{% if parameter.IsLast == false %}, {% endif %}{% endfor %})
{% else %}
{{ operation.MethodAccessModifier }} virtual {{ operation.ResultType }} {{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.Type }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}{% if parameter.IsLast == false %}, {% endif %}{% endfor %})

{% endif %}
{
{% if operation.ClientSuffix != "multifront" %}
return {{ operation.MethodType}}{{ operation.ActualOperationName }}{{ firstValue }}Async({% for parameter in operation.Parameters %}{{ parameter.VariableName }}, {% endfor %}System.Threading.CancellationToken.None);

{% else %}
return {{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.VariableName }}, {% endfor %}System.Threading.CancellationToken.None);
{% endif %}    }

{%     endif -%}
{%     if GenerateSyncMethods -%}
{% template Client.Method.Documentation %}
{% template Client.Method.Annotations %}

{% if operation.ClientSuffix != "multifront" %}

{{ operation.MethodAccessModifier }} virtual {{ operation.SyncResultType }} {{operation.MethodType}}{{ operation.ActualOperationName }}{{ firstValue }}({% for parameter in operation.Parameters %}{{ parameter.Type }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}{% if parameter.IsLast == false %}, {% endif %}{% endfor %})
{% else %}
{{ operation.MethodAccessModifier }} virtual {{ operation.SyncResultType }} {{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.Type }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}{% if parameter.IsLast == false %}, {% endif %}{% endfor %})

{% endif %}
{
{% if operation.ClientSuffix != "multifront" %}

{% if operation.HasResult or operation.WrapResponse %}return {% endif %}System.Threading.Tasks.Task.Run(async () => await {{operation.MethodType}}{{ operation.ActualOperationName }}{{ firstValue }}Async({% for parameter in operation.Parameters %}{{ parameter.VariableName }}, {% endfor %}System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
{% else %}
{% if operation.HasResult or operation.WrapResponse %}return {% endif %}System.Threading.Tasks.Task.Run(async () => await {{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.VariableName }}, {% endfor %}System.Threading.CancellationToken.None)).GetAwaiter().GetResult();

{% endif %}

}

{%     endif -%}
/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
{% template Client.Method.Documentation %}
{% template Client.Method.Annotations %}

{% if operation.ClientSuffix != "multifront" %}

{{ operation.MethodAccessModifier }} virtual async {{ operation.ResultType }} {{operation.MethodType}}{{ operation.ActualOperationName }}{{ firstValue }}Async({% for parameter in operation.Parameters %}{{ parameter.Type }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}, {% endfor %}System.Threading.CancellationToken cancellationToken{% if GenerateOptionalParameters %} = default(System.Threading.CancellationToken){% endif %})
{% else %}
{{ operation.MethodAccessModifier }} virtual async {{ operation.ResultType }} {{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.Type }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}, {% endfor %}System.Threading.CancellationToken cancellationToken{% if GenerateOptionalParameters %} = default(System.Threading.CancellationToken){% endif %})

{% endif %}


{
{%     for parameter in operation.PathParameters -%}
{%         if parameter.IsNullable == false and parameter.IsRequired -%}
if ({{ parameter.VariableName }} == null)
throw new System.ArgumentNullException("{{ parameter.VariableName }}");

{%         endif -%}
{%     endfor -%}
{%     for parameter in operation.QueryParameters -%}
{%         if parameter.IsNullable == false and parameter.IsRequired -%}
if ({{ parameter.VariableName }} == null)
throw new System.ArgumentNullException("{{ parameter.VariableName }}");

{%         endif -%}
{%     endfor -%}
{%     if operation.HasContent and operation.ContentParameter.IsRequired -%}
if ({{ operation.ContentParameter.VariableName }} == null)
throw new System.ArgumentNullException("{{ operation.ContentParameter.VariableName }}");

{%     endif -%}
string endpoint = ZnodeAdminSettings.ZnodeApiGateway;
endpoint += "/" + "{{ operation.Path }}";
{%     for parameter in operation.PathParameters -%}
{%         if parameter.IsOptional -%}
if ({{ parameter.VariableName }} != null)
{% template Client.Class.PathParameter %}
else
endpoint =  endpoint.Replace("/{{ "{" }}{{ parameter.Name }}}", string.Empty);
{%         else -%}
{% template Client.Class.PathParameter %}
{%         endif -%}
{%     endfor -%}
{% if operation.HasQueryParameters -%}
{% assign parameterNames = "expand,filter,sort,pageIndex,pageSize" | split: "," %}
{% if operation.IsGetOrDeleteOrHead == true -%}
{% assign queryParams = "" %}
{% assign nullCount = 0 %}
{% for name in parameterNames %}{% assign param = operation.QueryParameters | where: "VariableName", name | first %}{% if param != null %}{% assign queryParams = queryParams | append: param.VariableName %}{% else %}{% assign queryParams = queryParams | append: "null" %}{% assign nullCount = nullCount | plus: 1 %}{% endif %}{%- if forloop.last == false -%}{% assign queryParams = queryParams | append: ", " %}{%- endif -%}
{% endfor %}
{% if nullCount == 5 %}
  {% assign queryParams = queryParams | split: ", " | slice: 0, 4 | join: ", " %}
{% endif %}
endpoint += BuildEndpointQueryString({{ queryParams }});
{% endif %}

{% if operation.IsGetOrDeleteOrHead == true -%}

{% assign parameterNames = "expand,filter,sort,pageIndex,pageSize" | split: "," %}
{% for parameter in operation.QueryParameters %}
{% unless parameterNames contains parameter.VariableName %}
endpoint += "&{{ parameter.VariableName | strip }}=" + {{ parameter.VariableName }};
{% endunless %}
{% endfor %}
{% else -%}
{% for parameter in operation.QueryParameters %}
{% unless parameterNames contains parameter.VariableName %}
endpoint += "?{{ parameter.VariableName | strip }}=" + {{ parameter.VariableName }};
{% endunless %}
{% endfor %}

{% endif %}


{% endif %}
HttpResponseMessage  response_ = null;
var disposeResponse_ = true;
try
{
ApiStatus status = new ApiStatus();

{% capture firstParameterType %}{{ operation.Parameters[0].Type }}{% endcapture %}


{%         if operation.IsGet -%}
response_ = await GetResourceFromEndpointAsync(endpoint, status, cancellationToken).ConfigureAwait(false);
{%         elsif operation.IsDelete -%}
{% if operation.ContentParameter %}
{% if firstParameterType contains 'FileParameter' %}
response_ = await UploadFilesAsync(endpoint,{{ operation.ContentParameter.VariableName }}, status, cancellationToken).ConfigureAwait(false);
{% else %}
response_ = await PostResourceToEndpointAsync(endpoint, JsonConvert.SerializeObject({{ operation.ContentParameter.VariableName }}), status, cancellationToken).ConfigureAwait(false);
{% endif %}

{% else %}
response_ = await DeleteResourceFromEndpointAsync(endpoint, status, cancellationToken).ConfigureAwait(false);
{% endif %}
{% elsif operation.IsPost -%}
{% if operation.HasContent and operation.ContentParameter != null %}
{% if firstParameterType contains 'FileParameter' %}
response_ = await UploadFilesAsync(endpoint,{{ operation.ContentParameter.VariableName }}, status, cancellationToken).ConfigureAwait(false);
{% else %}
response_ = await PostResourceToEndpointAsync(endpoint, JsonConvert.SerializeObject({{ operation.ContentParameter.VariableName }}), status, cancellationToken).ConfigureAwait(false);
{% endif %}

{% else %}
{% if firstParameterType contains 'FileParameter' %}
response_ = await UploadFilesAsync(endpoint,{{ operation.ContentParameter.VariableName }}, status, cancellationToken).ConfigureAwait(false);
{% else %}x
response_ = await PostResourceToEndpointAsync(endpoint, null, status, cancellationToken).ConfigureAwait(false);
{% endif %}
{% endif %}

{%         elsif operation.IsPut -%}
response_ = await PutResourceToEndpointAsync(endpoint, JsonConvert.SerializeObject({% for parameter in operation.Parameters %}{% if forloop.last %}{{ parameter.VariableName }}{% endif %}{% endfor %}), status, cancellationToken).ConfigureAwait(false);
{%     endif -%}
var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
if (response_.Content != null && response_.Content.Headers != null)
{
foreach (var item_ in response_.Content.Headers)
headers_[item_.Key] = item_.Value;
}
var status_ = (int)response_.StatusCode;
if (status_ == 401 && headers_.ContainsKey("Is-JWT-Authorization") && (headers_["Is-JWT-Authorization"].FirstOrDefault()).ToString() == "true")
{
  throw new ZnodeException(status.ErrorCode, status.ErrorMessage, status.StatusCode);
}
{%     for response in operation.Responses -%}
{%     if response.StatusCode ==  '204' -%}
if (status_ == 204)
{
{% if operation.SyncResultType == 'FileResponse' -%}
return null;
{% else -%}
return new {{ operation.SyncResultType }}();
{% endif %}
}
{%     else -%}
if (status_ == {{ response.StatusCode }}{% if response.CheckChunkedStatusCode %} || status_ == 206{% endif %})
{
{% template Client.Class.ProcessResponse %}
}
{%     endif -%}
else
{%     endfor -%}
{%     if operation.HasDefaultResponse -%}
{%         if operation.DefaultResponse.HasType -%}
{
{%             assign response = operation.DefaultResponse -%}
{% template Client.Class.ProcessResponse %}
}
{%         elsif operation.HasSuccessResponse -%}
{
var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
throw new {{ ExceptionClass }}("{{ operation.DefaultResponse.ExceptionDescription }}", status_, responseData_, headers_, null);
}
{%        elsif operation.HasResultType -%}
{%             if operation.WrapResponse and operation.UnwrappedResultType != "FileResponse" %}
return new {{ ResponseClass }}<{{ operation.UnwrappedResultType }}>(status_, headers_, {{ operation.UnwrappedResultDefaultValue }});
{%             else -%}
return {{ operation.UnwrappedResultDefaultValue }};
{%             endif -%}
{%         elsif operation.WrapResponse -%}
return new {{ ResponseClass }}(status_, headers_);
{%         endif -%}
{%     else -%}
{%         if operation.HasSuccessResponse == false -%}
{% comment -%}
If the success response has already been explicitely declared, there is no need for this default code (because handled above).
Otherwise, return default values on success because we don't want to throw on "unknown status code".
Success is always expected
{%- endcomment %}
if (status_ == 200 || status_ == 204)
{
{%             if operation.HasResultType -%}
{%                 if operation.WrapResponse and operation.UnwrappedResultType != "FileResponse" %}
return new {{ ResponseClass }}<{{ operation.UnwrappedResultType }}>(status_, headers_, {{ operation.UnwrappedResultDefaultValue }});
{%                 else -%}
return {{ operation.UnwrappedResultDefaultValue }};
{%                 endif -%}
{%             elsif operation.WrapResponse -%}
return new {{ ResponseClass }}(status_, headers_);
{%             else -%}{% comment %} This method isn't expected to return a value. Just return. {% endcomment %}
return;
{%             endif -%}
}
else
{%         endif -%}
{
string responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
{{ operation.SyncResultType }} typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<{{ operation.SyncResultType }}>(responseData_, JsonSerializerSettings);
UpdateApiStatus(typedBody, status, response_);
throw new {{ ExceptionClass }}(status.ErrorCode, status.ErrorMessage, status.StatusCode);
}
{%     endif -%}

}
finally
{
if (disposeResponse_)
response_.Dispose();
}
}
{% endfor %}
protected struct ObjectResponseResult<T>
{
public ObjectResponseResult(T responseObject, string responseText)
{
this.Object = responseObject;
this.Text = responseText;
}
public T Object { get; }

public string Text { get; }
}

{% template Client.Class.ReadObjectResponse %}

{% template Client.Class.ConvertToString %}
{% template Client.Class.Body %}
}